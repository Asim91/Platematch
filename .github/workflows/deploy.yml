name: Deploy to Google Cloud Run

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: platematch

      - name: Configure Docker
        run: |
          gcloud auth configure-docker

      # Extract configuration values from YAML files
      - name: Extract configuration values
        id: extract_config
        run: |
          # Extract backend URL from frontend service config
          BACKEND_URL=$(grep -A 2 'NEXT_PUBLIC_BACKEND_URL' deployment/frontend-service.yaml | grep 'value:' | sed 's/.*value: *"\(.*\)".*/\1/')
          echo "Backend URL from config: $BACKEND_URL"
          echo "backend_url=$BACKEND_URL" >> $GITHUB_ENV
          
          # Extract CORS settings from backend service config
          CORS_DOMAINS=$(grep -A 2 'CORS_ORIGINS' deployment/backend-service.yaml | grep 'value:' | sed 's/.*value: *"\(.*\)".*/\1/')
          echo "CORS domains from config: $CORS_DOMAINS"
          echo "cors_domains=$CORS_DOMAINS" >> $GITHUB_ENV

      # Build and push backend Docker image
      - name: Build and push backend Docker image
        run: |
          echo "Building backend image"
          docker build -t gcr.io/platematch/backend -f backend/Dockerfile backend/
          docker push gcr.io/platematch/backend

      # Build and push frontend Docker image with backend URL from config
      - name: Build and push frontend Docker image
        run: |
          echo "Building frontend with backend URL: ${{ env.backend_url }}"
          docker build \
            --build-arg NEXT_PUBLIC_BACKEND_URL=${{ env.backend_url }} \
            -t gcr.io/platematch/frontend \
            -f frontend/Dockerfile frontend/
          docker push gcr.io/platematch/frontend

      # Deploy backend service using YAML file as-is
      - name: Deploy backend to Cloud Run
        run: |
          echo "Deploying backend service with configuration from backend-service.yaml"
          gcloud run services replace deployment/backend-service.yaml --region=europe-west1

      # Deploy frontend service using YAML file as-is
      - name: Deploy frontend to Cloud Run
        run: |
          echo "Deploying frontend service with configuration from frontend-service.yaml"
          gcloud run services replace deployment/frontend-service.yaml --region=europe-west1

      # Set IAM policies for public access
      - name: Configure public access
        run: |
          if [ -f "deployment/policy.yaml" ]; then
            echo "Using policy.yaml for IAM settings"
            gcloud run services set-iam-policy platematch-backend deployment/policy.yaml --region=europe-west1 --quiet
            gcloud run services set-iam-policy platematch-frontend deployment/policy.yaml --region=europe-west1 --quiet
          else
            echo "Setting default public access"
            gcloud run services add-iam-policy-binding platematch-backend --region=europe-west1 --member="allUsers" --role="roles/run.invoker" --quiet
            gcloud run services add-iam-policy-binding platematch-frontend --region=europe-west1 --member="allUsers" --role="roles/run.invoker" --quiet
          fi

      # Verify final configuration
      - name: Verify service configuration
        run: |
          echo "Backend Configuration:"
          gcloud run services describe platematch-backend --region=europe-west1 --format='yaml(spec.template.spec.containers[0].env)'
          
          echo "Frontend Configuration:"
          gcloud run services describe platematch-frontend --region=europe-west1 --format='yaml(spec.template.spec.containers[0].env)'

      # Deployment summary
      - name: Deployment Summary
        run: |
          echo "âœ… Deployment completed successfully!"
          echo "Backend URL: $(cat /tmp/backend_url.txt)"
          echo "Frontend URL: $(cat /tmp/frontend_url.txt)"
