name: Deploy to Google Cloud Run

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: platematch

      - name: Configure Docker
        run: |
          gcloud auth configure-docker

      # Build and push backend Docker image
      - name: Build and push backend Docker image
        run: |
          IMAGE_NAME=gcr.io/platematch/backend
          docker build -t $IMAGE_NAME -f backend/Dockerfile backend/
          docker push $IMAGE_NAME

      # Deploy backend service first
      - name: Deploy backend to Cloud Run
        run: |
          gcloud run services replace deployment/backend-service.yaml --region=europe-west1

      # Extract backend URL and store it for use in multiple steps
      - name: Extract backend URL
        id: extract_backend_url
        run: |
          BACKEND_URL=$(gcloud run services describe platematch-backend --region=europe-west1 --format='value(status.url)')
          echo "Backend URL: $BACKEND_URL"
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV
          echo "$BACKEND_URL" > /tmp/backend_url.txt

      # Build frontend image with the backend URL as a build argument
      - name: Build and push frontend Docker image
        run: |
          # Get the backend URL from the previous step
          BACKEND_URL=$(gcloud run services describe platematch-backend --region=europe-west1 --format='value(status.url)')
          echo "Using backend URL: $BACKEND_URL"
          
          # Build with explicit build arg
          docker build \
            --build-arg NEXT_PUBLIC_BACKEND_URL=$BACKEND_URL \
            -t gcr.io/platematch/frontend \
            frontend/
          
          docker push gcr.io/platematch/frontend
          
          # Also update the environment variable in the frontend service config
          sed -i "/NEXT_PUBLIC_BACKEND_URL/,/value:/{s|value: .*|value: \"$BACKEND_URL\"|}" deployment/frontend-service.yaml

      # Deploy frontend service
      - name: Deploy frontend to Cloud Run
        run: |
          gcloud run services replace deployment/frontend-service.yaml --region=europe-west1

      # Extract frontend URL
      - name: Extract frontend URL
        id: extract_frontend_url
        run: |
          FRONTEND_URL=$(gcloud run services describe platematch-frontend --region=europe-west1 --format='value(status.url)')
          echo "Frontend URL: $FRONTEND_URL"
          echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV
          echo "$FRONTEND_URL" > /tmp/frontend_url.txt

      # Update backend CORS settings with frontend URL
      - name: Update backend CORS configuration
        run: |
          FRONTEND_URL=$(cat /tmp/frontend_url.txt)
          echo "Updating backend CORS with frontend URL: $FRONTEND_URL"
          
          # Get current CORS settings
          CURRENT_CORS=$(gcloud run services describe platematch-backend --region=europe-west1 --format='value(spec.template.spec.containers[0].env[?(@.name=="CORS_ORIGINS")].value)')
          
          # Build new CORS string
          if [ -z "$CURRENT_CORS" ]; then
            NEW_CORS="$FRONTEND_URL"
          elif [[ "$CURRENT_CORS" != *"$FRONTEND_URL"* ]]; then
            NEW_CORS="$CURRENT_CORS,$FRONTEND_URL"
          else
            NEW_CORS="$CURRENT_CORS"
          fi
          
          # Update backend service with new CORS settings
          gcloud run services update platematch-backend \
            --region=europe-west1 \
            --update-env-vars="CORS_ORIGINS=$NEW_CORS"

      # Set IAM policies for public access
      - name: Configure public access
        run: |
          if [ -f "deployment/policy.yaml" ]; then
            echo "Using policy.yaml for IAM settings"
            gcloud run services set-iam-policy platematch-backend deployment/policy.yaml --region=europe-west1 --quiet
            gcloud run services set-iam-policy platematch-frontend deployment/policy.yaml --region=europe-west1 --quiet
          else
            echo "Warning: policy.yaml not found, using default policy"
            # Set default allow unauthenticated
            gcloud run services add-iam-policy-binding platematch-backend --region=europe-west1 --member="allUsers" --role="roles/run.invoker" --quiet
            gcloud run services add-iam-policy-binding platematch-frontend --region=europe-west1 --member="allUsers" --role="roles/run.invoker" --quiet
          fi

      # Verify final configuration
      - name: Verify service configuration
        run: |
          echo "Backend Configuration:"
          gcloud run services describe platematch-backend --region=europe-west1 --format='yaml(spec.template.spec.containers[0].env)'
          
          echo "Frontend Configuration:"
          gcloud run services describe platematch-frontend --region=europe-west1 --format='yaml(spec.template.spec.containers[0].env)'
      
      # Deployment summary
      - name: Deployment Summary
        run: |
          echo "âœ… Deployment completed successfully!"
          echo "Backend URL: $(cat /tmp/backend_url.txt)"
          echo "Frontend URL: $(cat /tmp/frontend_url.txt)"
